# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yesense_imu/YesenseImuNavData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import yesense_imu.msg

class YesenseImuNavData(genpy.Message):
  _md5sum = "4aa52ebf06cd4d0bdd17a2cc70d2b2cf"
  _type = "yesense_imu/YesenseImuNavData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16                          tid
yesense_imu/YesenseImuLocation  location
yesense_imu/YesenseImuUtcTime   utc_time
yesense_imu/YesenseImuStatus    status
================================================================================
MSG: yesense_imu/YesenseImuLocation
float64 longtidue
float64 latitude
float32 altidue
================================================================================
MSG: yesense_imu/YesenseImuUtcTime
uint16 year
uint8 month
uint8 date
uint8 hour
uint8 min
uint8 sec
uint32 ms
================================================================================
MSG: yesense_imu/YesenseImuStatus
uint8 fusion_status
uint8 gnss_status"""
  __slots__ = ['tid','location','utc_time','status']
  _slot_types = ['uint16','yesense_imu/YesenseImuLocation','yesense_imu/YesenseImuUtcTime','yesense_imu/YesenseImuStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tid,location,utc_time,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YesenseImuNavData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tid is None:
        self.tid = 0
      if self.location is None:
        self.location = yesense_imu.msg.YesenseImuLocation()
      if self.utc_time is None:
        self.utc_time = yesense_imu.msg.YesenseImuUtcTime()
      if self.status is None:
        self.status = yesense_imu.msg.YesenseImuStatus()
    else:
      self.tid = 0
      self.location = yesense_imu.msg.YesenseImuLocation()
      self.utc_time = yesense_imu.msg.YesenseImuUtcTime()
      self.status = yesense_imu.msg.YesenseImuStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2dfH5BI2B().pack(_x.tid, _x.location.longtidue, _x.location.latitude, _x.location.altidue, _x.utc_time.year, _x.utc_time.month, _x.utc_time.date, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.ms, _x.status.fusion_status, _x.status.gnss_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.location is None:
        self.location = yesense_imu.msg.YesenseImuLocation()
      if self.utc_time is None:
        self.utc_time = yesense_imu.msg.YesenseImuUtcTime()
      if self.status is None:
        self.status = yesense_imu.msg.YesenseImuStatus()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.tid, _x.location.longtidue, _x.location.latitude, _x.location.altidue, _x.utc_time.year, _x.utc_time.month, _x.utc_time.date, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.ms, _x.status.fusion_status, _x.status.gnss_status,) = _get_struct_H2dfH5BI2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2dfH5BI2B().pack(_x.tid, _x.location.longtidue, _x.location.latitude, _x.location.altidue, _x.utc_time.year, _x.utc_time.month, _x.utc_time.date, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.ms, _x.status.fusion_status, _x.status.gnss_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.location is None:
        self.location = yesense_imu.msg.YesenseImuLocation()
      if self.utc_time is None:
        self.utc_time = yesense_imu.msg.YesenseImuUtcTime()
      if self.status is None:
        self.status = yesense_imu.msg.YesenseImuStatus()
      end = 0
      _x = self
      start = end
      end += 35
      (_x.tid, _x.location.longtidue, _x.location.latitude, _x.location.altidue, _x.utc_time.year, _x.utc_time.month, _x.utc_time.date, _x.utc_time.hour, _x.utc_time.min, _x.utc_time.sec, _x.utc_time.ms, _x.status.fusion_status, _x.status.gnss_status,) = _get_struct_H2dfH5BI2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2dfH5BI2B = None
def _get_struct_H2dfH5BI2B():
    global _struct_H2dfH5BI2B
    if _struct_H2dfH5BI2B is None:
        _struct_H2dfH5BI2B = struct.Struct("<H2dfH5BI2B")
    return _struct_H2dfH5BI2B
